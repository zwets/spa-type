#!/bin/bash
#
#  blast-in-silico-pcr - Simple in silico PCR using Bash and BLAST
#  Copyright (C) 2016  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Part of http://io.zwets.it/blast-galley

export LC_ALL="C"

# Defaults
MIN_LEN=1
MAX_LEN=5000
MAX_MIS=2

# Function to emit information to standard error if VERBOSE is set
emit() { [ -z "$VERBOSE" ] || echo "$(basename "$0"): $*" >&2; }

# Function to exit this script with an error message on stderr
err_exit() { echo "$(basename "$0"): $*" >&2; exit 1; }

# Function to exit when there are degenerate bases
err_degen_exit() { echo "$(basename "$0"): issue: primers contain degenerate bases.

  One or more primers have degenerate bases.  BLAST counts these as mismatches,
  even if the actual base matches the degenerate base.  Solution is to replace
  the primer with multiple pairs that have proper (ACGT) bases.
"; exit 1
}

# Function to exit this script with an error message on stderr
warn_msg() { echo "$(basename "$0"): $*" >&2; }

# Function to clean up files if keep is set
clean_up() {
    [ -z "$KEEP" ] &&
        emit "cleaning up, removing: $@" && rm -f "$@" ||
        emit "keeping intermediate file(s): $@"
}

# Function to extract the $1th fasta sequence from file $2
get_fasta_seq() {
    gawk -bO -v N="$1" '
    /^>/ { C=C+1; if (C==N) print } 
    /^[^>]/ && C==N' "$2"
}

# Function to extract the $1th fasta sequence from file $2
get_fasta_id() {
    gawk -bO -v N="$1" '/^>/ && ++C==N {print substr($1,2)}' "$2"
}

# Function echoes the number of degenerate bases in the input
count_degen_bases() {
    gawk -bO 'BEGIN {C=0;D="NnKkMmSsWwYyRrBbVvDdHh"}
    /^[^>]/ {for (i=1;i<=length();++i) if (index(D,substr($0,i,1))) C++}
    END {print C}' "$@"
}

# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $(basename $0) [OPTIONS] PRIMERS [TARGET]

  Perform in silico PCR for the primer pairs in file PRIMERS against FASTA
  file or BLAST database TARGET.

  PRIMERS must be a FASTA format file with one or more pairs of primer
  sequences in 5'-3' direction.

  TARGET can be either a FASTA file or the name of a BLAST database.  When
  TARGET is omitted or '-', FASTA is read from standard input.  Note that
  sequence IDs in FASTA must be unique; use -u/--uniquify-ids to ensure.

  OPTIONS
   -m,--mismatches M  mismatch count allowed per primer (default: $MAX_MIS)
   -b,--min-len B     minimum required selection length (default: $MIN_LEN)
   -t,--max-len T     maximum allowed selection length (default: $MAX_LEN)
   -u,--uniquify-ids  generate unique sequence IDs for target FASTA
   -k,--keep          keep intermediate files
   -v,--verbose       emit progress messages to standard error
"
    exit ${1:-1}
}

# Parse options

unset VERBOSE KEEP UNIQUIFY
while [ $# -ne 0 -a "$(expr "$1" : '\(.[0-9]*\).*')" = "-" ]; do
    case $1 in
    -m|--mismatches) shift; MAX_MIS=$1 ;;
    --mismatches=*)  MAX_MIS="${1#--mismatches=}" ;;
    -b|--min-len)    shift; MIN_LEN=$1 ;;
    --min-len=*)     MIN_LEN="${1#--min-len=}" ;;
    -t|--max-len)    shift; MAX_LEN=$1 ;;
    --max-len=*)     MAX_LEN="${1#--max-len=}" ;;
    -u|--uniquify*)  UNIQUIFY=1 ;;
    -k|--keep)       KEEP=1; VERBOSE=1 ;;
    -v|--verbose)    VERBOSE=1 ;;
    -h|--help)       usage_exit 0 ;;
    *) usage_exit ;;
    esac
    shift || usage_exit
done

# Check the arguments

[ $# -ge 1 ] || usage_exit
[ $MIN_LEN -gt 0 ] || err_exit "minimum length must be non-zero positive"
[ $MAX_LEN -ge $MIN_LEN ] || err_exit "maximum length must not be smaller than minimum length"

PRIMERS_FILE="$1"
[ -r "$PRIMERS_FILE" ] || err_exit "cannot read primer file: $PRIMERS_FILE"
[ $(count_degen_bases "$PRIMERS_FILE") -eq 0 ] || err_degen_exit

PRIMER_COUNT=$(grep '^>' "$1" | wc -l)
[ $PRIMER_COUNT -ge 2 ] || err_exit "file must be FASTA and have at least two sequences: $PRIMERS_FILE"
[ $(((PRIMER_COUNT+1)/2)) -eq $((PRIMER_COUNT/2)) ] ||
    err_exit "primers do not pair up (there is an odd number of sequences): $PRIMERS_FILE"

# Set up work dir

WORK_DIR="$(mktemp -d)"

# Locate or create blast database of the target

TARGET="${2:-"-"}"
if [ "$TARGET" = '-' ] || [ -f "$TARGET" ]; then

    # TARGET is stdin or a file, create temp blast database
    BLAST_DB="$WORK_DIR/target"
    emit "create temporary BLAST database: $BLAST_DB"
    { [ -n "$UNIQUIFY" ] &&
      gawk -bO '/^>/ { print ">U" NR "_" substr($0,2) } /^[^>]/' "$TARGET" ||
      cat "$TARGET" 
    } |
    makeblastdb -out "$BLAST_DB" -title "target" -dbtype nucl -parse_seqids >/dev/null ||
        err_exit "failed to create BLAST database: $BLAST_DB"

    blastdbcmd -db "$BLAST_DB" -info >/dev/null || err_exit "failed to create temporary BLAST database: $TARGET"

else # TARGET is not a file or '-', we assume it is the name of a BLAST database

    BLAST_DB="$TARGET"
    emit "check that TARGET is a BLAST database: $TARGET"
    blastdbcmd -db "$BLAST_DB" -info >/dev/null || err_exit "target is neither a file nor a BLAST database: $TARGET"
fi

# Set up TSV_OUTPUT to collect results

TSV_OUTPUT="$WORK_DIR/pcr.matches.tsv"
touch "$TSV_OUTPUT"

BLAST_OUTFMT="7 sacc sstrand sstart send qlen length nident mismatch qacc qstart qend slen stitle"

# Loop over the pairs

PAIR=0
while [ $((++PAIR)) -le $((PRIMER_COUNT/2)) ]; do

    FWD_PRIMER="$WORK_DIR/primer.$PAIR.fwd.dna"
    REV_PRIMER="$WORK_DIR/primer.$PAIR.rev.dna"
    FWD_BLAST="$WORK_DIR/blast.$PAIR.fwd.tsv"
    FWD_SEQIDS="$WORK_DIR/blast.$PAIR.fwd.seqids"
    REV_BLAST="$WORK_DIR/blast.$PAIR.rev.tsv"

    emit "extract the forward primer: $FWD_PRIMER"
    get_fasta_seq $((2*PAIR-1)) "$PRIMERS_FILE" >"$FWD_PRIMER"

    emit "BLAST the forward primer: $FWD_BLAST"
    blastn -task blastn-short -db "$BLAST_DB" -query "$FWD_PRIMER" -ungapped -word_size 4 -outfmt "$BLAST_OUTFMT" | grep -v '^#' >"$FWD_BLAST" || {
        warn_msg "BLAST of forward primer against database $BLAST_DB failed"
        continue
    }

    emit "extract the forward finds: $FWD_SEQIDS"
    gawk -bOF '\t' '{print $1}' "$FWD_BLAST" | sort -u > "$FWD_SEQIDS.tmp" &&
    blastdb_aliastool -seqid_file_in "$FWD_SEQIDS.tmp" -seqid_file_out "$FWD_SEQIDS" &&
    rm -f "$FWD_SEQIDS.tmp" || mv -f "$FWD_SEQIDS.tmp" "$FWD_SEQIDS"

    emit "extract the reverse primer: $REV_PRIMER"
    get_fasta_seq $((2*PAIR)) "$PRIMERS_FILE" >"$REV_PRIMER"

    emit "BLAST the reverse primers: $REV_BLAST"
    blastn -task blastn-short -db "$BLAST_DB" -query "$REV_PRIMER" -seqidlist "$FWD_SEQIDS" -ungapped -word_size 4 -outfmt "$BLAST_OUTFMT" | grep -v '^#' > "$REV_BLAST" || {
        warn_msg "BLAST of reverse primer against database $BLAST_DB failed"
        continue
    }

    emit "join the forward and reverse finds: $TSV_OUTPUT"
    gawk -bOF '\t' -v FWD_BLAST_CSV="$FWD_BLAST" -v MIN_LEN=$MIN_LEN -v MAX_LEN=$MAX_LEN -v MAX_MIS=$MAX_MIS '
    BEGIN {
        OFS=FS                              # Tab-separated output
        while (getline <FWD_BLAST_CSV == 1) {
            if ($7 + MAX_MIS >= $5) { # Filter on mismatch limit ($7 is identical count, $5 is query length)
                fwd[$1][1] = ""	        # Tell awk this is a subarray, see gawk(1)
                split($0,fwd[$1])
            }
        }
        close(FWD_BLAST_CSV)
    }
    # For every reverse line with at most MAX_MIS_REV mismatches
    $7 + MAX_MIS >= $5 {
        if (fwd[$1][1] == $1 && $2 != fwd[$1][2]) { 	# check that primers found on opposite strands
            # Length always difference of starting positions; start is lowest on plus, highest on minus (else do not meet)
            spos = $2 == "minus" ? fwd[$1][3] : $3		# start position is the start on the plus strand
            epos = $2 == "minus" ? $3 : fwd[$1][3]		# end position is the start on the minus strand
            len = 1 + epos - spos
            # Select if length not negative (PCR will not meet), and within length limit
            if (len >= MIN_LEN && len <= MAX_LEN) {
                print $1, fwd[$1][2], spos, epos, len, fwd[$1][5] - fwd[$1][7], $5 - $7, fwd[$1][9], $9, fwd[$1][10] "-" fwd[$1][11] "/" fwd[$1][5], $10 "-" $11 "/" $5, $12
            }
        }
    }
    ' "$REV_BLAST" | uniq >>"$TSV_OUTPUT"
done

emit "retrieve the product sequences"
cat "$TSV_OUTPUT" | while read CTG STR FROM TO LEN FWD_MM REV_MM FWD_PR REV_PR FWD_PM REV_PM REST; do
    PROD=$((PROD+1))
    blastdbcmd -db "$BLAST_DB" -entry "$CTG" -range "$FROM-$TO" |
    gawk -bO -v PROD=$PROD -v STRAND="$STR" -v I1="primer-pair=$FWD_PR-$REV_PR fwd-match=$FWD_PM rev-match=$REV_PM mismatches=$FWD_MM+$REV_MM" -v I2="[contig=$CTG; pos=$FROM-$TO; len=$LEN; strand=$STR]" '
        NR==1 { print ">pcr_prod_" PROD " " I1 " " substr($0,2) " " I2}
        NR!=1 { SEQ = SEQ $0 }
        END {
          if (STRAND == "plus") print SEQ; else {
            for (i = length(SEQ); i > 0; --i) {
              c = substr (SEQ,i,1)
              p = index ("AaCcGgTtNnKkMmSsWwYyRrBbVvDdHh", c)
              if (!p) { print "blast-in-silico-pcr: invalid character in sequence: " c; exit 1; }
              c = substr("TtGgCcAaNnMmKkSsWwRrYyVvBbHhDd", p, 1)
              printf "%c", c
            }
            printf "\n"
          }
        }'
done

[ -n "$KEEP" ] || [ ! -d "$WORK_DIR" ] || rm -rf "$WORK_DIR" || true

exit 0

# vim: sts=4:sw=4:ai:si:et:
